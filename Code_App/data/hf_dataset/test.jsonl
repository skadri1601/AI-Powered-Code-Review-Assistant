{"input": "@@ -9,6 +9,7 @@\n import os.path\n import socket  # noqa: F401\n import typing\n+import warnings\n \n from urllib3.exceptions import ClosedPoolError, ConnectTimeoutError\n from urllib3.exceptions import HTTPError as _HTTPError\n", "target": "I guess it's better to be safe, this should be addressed in 92075b330a30b9883f466a43d3f7566ab849f91b."}
{"input": "@@ -374,10 +375,20 @@ def build_response(self, req, resp):\n \n         return response\n \n-    def _get_connection(self, request, verify, proxies=None, cert=None):\n-        # Replace the existing get_connection without breaking things and\n-        # ensure that TLS settings are considered when we interact with\n-        # urllib3 HTTP Pools\n+    def get_connection_with_tls_context(self, request, verify, proxies=None, cert=None):\n+        \"\"\"Returns a urllib3 connection for the given request and TLS settings.\n+        This should not be called from user code, and is only exposed for use\n+        when subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n+\n+        :param request: The :class:`PreparedRequest <PreparedRequest>` object\n+            to be sent over the connection.\n+        :param verify: Either a boolean, in which case it controls whether\n+            we verify the server's TLS certificate, or a string, in which case it\n+            must be a path to a CA bundle to use.\n+        :param proxies: (optional) The proxies dictionary to apply to the request.\n+        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n+        :rtype: urllib3.ConnectionPool\n+        \"\"\"\n         proxy = select_proxy(request.url, proxies)\n         try:\n             host_params, pool_kwargs = _urllib3_request_context(request, verify, cert)\n", "target": "I thought about that but it's not reachable in any of our code anymore and if someone is using a custom implementation it won't have the warning.\n\nHappy to be wrong if I'm missing something but it seems like it will just be dead code on arrival."}
